{"version":3,"sources":["components/Users.js","components/Menu.js","components/Footer.js","components/ToDos.js","components/Projects.js","components/Auth.js","components/ToDoForm.js","components/ProjectForm.js","App.js","reportWebVitals.js","index.js"],"names":["UserItem","user","id","username","firstName","lastName","email","UsersList","usersList","previousPage","nextPage","load","onClick","map","Menu","props","isAuthenticated","logout","to","Footer","ToDoItem","toDo","deactivate","creator","project","name","body","isActive","type","ToDosList","toDosList","ProjectItem","deleteProject","ProjectDetail","projectsList","useParams","filter","length","users","forEach","push","gitLink","join","ProjectsList","projectFilter","onChange","e","target","value","LoginForm","state","password","this","setState","getToken","preventDefault","onSubmit","handleOnSubmit","placeholder","login","handleOnChange","React","Component","ToDoForm","toDoId","match","params","toDos","allToDos","allUsers","allProjects","createUpdateToDo","handleSubmit","handleChange","selected","required","withRouter","ProjectForm","projectId","projects","console","log","selectedOptions","i","item","createUpdateProject","multiple","handleUsersChange","includes","apiUrl","page404","path","pathname","App","token","previousUsersUrl","nextUsersUrl","previousProjectsUrl","nextProjectsUrl","filteredProjectsList","previousToDosUrl","nextToDosUrl","toDoList","cookies","Cookies","set","getStorageToken","setToken","get","loadProjects","loadUsers","loadToDo","fetch","method","headers","JSON","stringify","then","response","json","access","catch","error","Authorization","url","getHeaders","request","detail","results","previous","next","searchLine","re","RegExp","filteredList","className","bind","exact","Users","ToDos","deactivateToDo","Projects","from","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c982b479.chunk.js","sourcesContent":["import React from \"react\";\n\nconst UserItem = ({user}) => {\n    return (\n        <tr>\n            <td>\n                {user.id}\n            </td>\n            <td>\n                {user.username}\n            </td>\n            <td>\n                {user.firstName}\n            </td>\n            <td>\n                {user.lastName}\n            </td>\n            <td>\n                {user.email}\n            </td>\n        </tr>\n    );\n};\n\nconst UsersList = ({usersList, previousPage, nextPage, load}) => {\n    return (\n        <div>\n            <p>\n                {previousPage && <button onClick={() => load(previousPage)}>previous page</button>}\n                {nextPage && <button onClick={() => load(nextPage)}>next page</button>}\n            </p>\n            <table>\n                <thead>\n                <tr>\n                    <th>\n                        ID\n                    </th>\n                    <th>\n                        Username\n                    </th>\n                    <th>\n                        First name\n                    </th>\n                    <th>\n                        Last Name\n                    </th>\n                    <th>\n                        Email\n                    </th>\n                </tr>\n                </thead>\n                <tbody>\n                {usersList.map((user) => <UserItem key={user.id} user={user}/>)}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default UsersList;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Menu = (props) => {\n    return (\n        <div>\n            {props.isAuthenticated ? `${props.username} | | ` : ''}\n            {props.isAuthenticated ? <button onClick={() => props.logout()}>Logout</button> : <Link to={'/login'}>Login</Link>}\n            <br/>\n            <Link to={'/'}>Users</Link> |\n            | <Link to={'/projects/'}>Projects</Link> |\n            | <Link to={'/todos/'}>ToDos</Link>\n            <hr/>\n        </div>\n    );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nconst Footer = () => {\n    return (\n        <h3>Footer</h3>\n    );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst ToDoItem = ({toDo, deactivate}) => {\n    return (\n        <tr>\n            <td>{toDo.id}</td>\n            <td>{`${toDo.creator.firstName} ${toDo.creator.lastName}`}</td>\n            <td>{toDo.project.name}</td>\n            <td>{toDo.body}</td>\n            <td>{`${toDo.isActive}`}</td>\n            {toDo.isActive &&\n                <td>\n                    <Link to={`/todos/${toDo.id}/edit`}>Change</Link> <button onClick={() => deactivate(toDo.id)} type='button'>Deactivate</button>\n                </td>}\n        </tr>\n    );\n};\n\nconst ToDosList = ({toDosList, previousPage, nextPage, load, deactivate}) => {\n    return (\n        <div>\n            <p>\n                {previousPage && <button onClick={() => load(previousPage)}>previous page</button>}\n                {nextPage && <button onClick={() => load(nextPage)}>next page</button>}\n            </p>\n            <table>\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Creator</th>\n                    <th>Project</th>\n                    <th>Text</th>\n                    <th>Active</th>\n                    <th>Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                    {toDosList.map((toDo) => <ToDoItem key={toDo.id}\n                                                       deactivate={deactivate}\n                                                       toDo={toDo}/>)}\n                </tbody>\n            </table>\n            <Link to='/todos/create/'>Create</Link>\n        </div>\n    );\n};\n\nexport default ToDosList;\n","import React from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\n\nconst ProjectItem = ({project, deleteProject}) => {\n    return (\n        <tr>\n            <td>{project.id}</td>\n            <td><Link to={`/projects/${project.id}/`}>{project.name}</Link></td>\n            <td>\n                <button onClick={() => deleteProject(project.id)} type='button'>Delete</button>\n            </td>\n        </tr>\n    );\n};\n\nconst ProjectDetail = ({projectsList}) => {\n    let {id} = useParams();\n    let project = projectsList.filter(project => project.id === +id);\n    if (project.length) {\n        project = project[0];\n        let users = [];\n        project.users.forEach(\n            user => users.push(`${user.firstName} ${user.lastName}`)\n        );\n        return (<div>\n            <table>\n                <thead>\n                <tr>\n                    <th>Field</th>\n                    <th>Value</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td>ID</td>\n                    <td>{project.id}</td>\n                </tr>\n                <tr>\n                    <td>Name</td>\n                    <td>{project.name}</td>\n                </tr>\n                <tr>\n                    <td>Git</td>\n                    <td>{project.gitLink}</td>\n                </tr>\n                <tr>\n                    <td>Users</td>\n                    <td>{users.join(', ')}</td>\n                </tr>\n                </tbody>\n            </table>\n            <Link to={`/projects/${project.id}/edit`}>Edit</Link>\n        </div>)\n    }\n    return (<h1>Page {`/projects/${id}/`} not found</h1>)\n}\n\nconst ProjectsList = ({projectsList, previousPage, nextPage, load, deleteProject, projectFilter}) => {\n    return (\n        <div>\n            <p>Искать: <input type=\"text\" onChange={e => projectFilter(e.target.value)}/></p>\n            <p>\n                {previousPage && <button onClick={() => load(previousPage)}>previous page</button>}\n                {nextPage && <button onClick={() => load(nextPage)}>next page</button>}\n            </p>\n            <table>\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                {projectsList.map((project) => <ProjectItem key={project.id}\n                                                            project={project}\n                                                            deleteProject={deleteProject}/>)}\n                </tbody>\n            </table>\n            <Link to='/projects/create/'>Create</Link>\n        </div>\n    );\n};\n\nexport default ProjectsList;\nexport {ProjectDetail};\n","import React from \"react\";\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {username: '', password: ''};\n    }\n\n    handleOnChange(e) {\n        this.setState(\n            {\n                [e.target.name]: e.target.value\n            }\n        );\n    }\n\n    handleOnSubmit(e) {\n        this.props.getToken(this.state.username, this.state.password);\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={(e) => this.handleOnSubmit(e)}>\n                    <input type=\"text\"\n                           name=\"username\"\n                           placeholder=\"username\"\n                           value={this.state.login}\n                           onChange={(e) => this.handleOnChange(e)}\n                    />\n                    <input type=\"password\"\n                           name=\"password\"\n                           placeholder=\"password\"\n                           value={this.state.password}\n                           onChange={(e) => this.handleOnChange(e)}\n                    />\n                    <input type=\"submit\" value=\"login\"/>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default LoginForm;\n","import React from \"react\";\nimport {withRouter} from \"react-router-dom\";\n\nclass ToDoForm extends React.Component {\n    constructor(props) {\n        super(props);\n        let toDoId = +props.match.params.id\n        if(toDoId) {\n            let toDos = props.allToDos.filter(toDo => toDo.id === toDoId)\n            let toDo = toDos.length > 0 ? toDos[0] : {}\n            this.state = {\n                id: toDo.id,\n                creator: toDo.creator,\n                project: toDo.project.id,\n                body: toDo.body,\n            };\n        } else {\n            // при обновлении страницы не подтягивается юзер. работает только если перейти на создание задачи по ссылке\n            // как решить проблему пока не придумал\n            let creator = props.allUsers.filter(user => user.username === props.username)[0] || {};\n            this.state = {\n                id: null,\n                'creator': creator,\n                project: props.allProjects.length > 0 ? props.allProjects[0].id : null,\n                body: \"\",\n            };\n        }\n    }\n\n    handleChange(e) {\n        this.setState({\n                [e.target.name]: e.target.value,\n            });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.createUpdateToDo(\n            this.state.id,\n            this.state.creator.id,\n            +this.state.project,\n            this.state.body\n        )\n    }\n\n    render() {\n        return (\n            <form onSubmit={e => this.handleSubmit(e)}>\n                <div>\n                    <label>Creator: </label>\n                    <span>{this.state.creator.firstName} {this.state.creator.lastName}</span>\n                </div>\n                <div>\n                    <label>Project</label>\n                    <select\n                        name=\"project\"\n                        onChange={e => this.handleChange(e)}\n                    >\n                        {this.props.allProjects.map(project => {\n                            if(+this.state.project === +project.id){\n                                return <option key={project.id} selected value={project.id}>\n                                    {project.name}\n                                </option>\n                            }\n                            return <option key={project.id} value={project.id}>\n                                {project.name}\n                            </option>\n                        } )}\n                    </select>\n                </div>\n                <div>\n                    <label>Body</label>\n                    <input\n                        required\n                        type=\"text\"\n                        name=\"body\"\n                        value={this.state.body}\n                        onChange={e => this.handleChange(e)}\n                    />\n                </div>\n                <input type=\"submit\" value=\"Save\"/>\n            </form>\n        );\n    }\n}\n\nexport default withRouter(ToDoForm)\n","import React from \"react\";\nimport {withRouter} from \"react-router-dom\";\n\nclass ProjectForm extends React.Component {\n    constructor(props) {\n        super(props);\n        let projectId = +props.match.params.id\n        if(projectId) {\n            let projects = props.allProjects.filter(project => project.id === projectId)\n            let project = projects.length > 0 ? projects[0] : {users: []}\n            let users = project.users.map(user => user.id)\n            console.log(users)\n            this.state = {\n                id: project.id,\n                name: project.name,\n                gitLink: project.gitLink,\n                users: users,\n            };\n        } else {\n            this.state = {\n                id: null,\n                name: '',\n                gitLink: '',\n                users: [],\n            };\n        }\n    }\n\n    handleChange(e) {\n        this.setState({\n                [e.target.name]: e.target.value,\n            });\n    }\n\n    handleUsersChange(e) {\n        let selectedOptions = e.target.selectedOptions\n        if(selectedOptions) {\n            let users = [];\n            for(let i = 0; i < selectedOptions.length; i++) {\n                users.push(+selectedOptions.item(i).value);\n            }\n\n            this.setState({\n                users: users\n            });\n        }\n    }\n\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.createUpdateProject(\n            this.state.id,\n            this.state.name,\n            this.state.gitLink,\n            this.state.users\n        )\n    }\n\n    render() {\n        return (\n            <form onSubmit={e => this.handleSubmit(e)}>\n                <div>\n                    <label>Name</label>\n                    <input\n                        required\n                        type=\"text\"\n                        name=\"name\"\n                        value={this.state.name}\n                        onChange={e => this.handleChange(e)}\n                    />\n                </div>\n                <div>\n                    <label>Git link</label>\n                    <input\n                        type=\"url\"\n                        name=\"gitLink\"\n                        value={this.state.gitLink}\n                        onChange={e => this.handleChange(e)}\n                    />\n                </div>\n                <div>\n                    <label>Users</label>\n                    <select\n                        multiple\n                        required\n                        name=\"users\"\n                        onChange={e => this.handleUsersChange(e)}\n                    >\n                        {this.props.allUsers.map(user => {\n                            if (this.state.users.length > 0 && this.state.users.includes(user.id)){\n                                return <option selected key={user.id} value={user.id}>\n                                    {`${user.firstName} ${user.lastName}`}\n                                </option>\n                            }\n                            return <option key={user.id} value={user.id}>\n                                {`${user.firstName} ${user.lastName}`}\n                            </option>\n                        } )}\n                    </select>\n                </div>\n                <input type=\"submit\" value=\"Save\"/>\n            </form>\n        )\n    }\n}\n\nexport default withRouter(ProjectForm)\n","import React from \"react\";\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\nimport Cookies from \"universal-cookie/lib\";\nimport './App.css';\nimport UsersList from \"./components/Users\";\nimport Menu from \"./components/Menu\";\nimport Footer from \"./components/Footer\";\nimport ToDosList from \"./components/ToDos\";\nimport ProjectsList, {ProjectDetail} from \"./components/Projects\";\nimport LoginForm from \"./components/Auth\";\nimport ToDoForm from \"./components/ToDoForm\";\nimport ProjectForm from \"./components/ProjectForm\";\n\nconst apiIpAddress = '127.0.0.1'\nconst apiUrl = `http://${apiIpAddress}:8000/api`;\n\nconst page404 = ({path}) => {\n    return (\n        <h1>Page '{path.pathname}' not found</h1>\n    );\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            token: '',\n            username: '',\n            isAuthenticated: false,\n            previousUsersUrl: null,\n            nextUsersUrl: null,\n            usersList: [],\n            previousProjectsUrl: null,\n            nextProjectsUrl: null,\n            projectsList: [],\n            filteredProjectsList: [],\n            previousToDosUrl: null,\n            nextToDosUrl: null,\n            toDoList: [],\n        };\n    }\n\n    setToken(token, username = '') {\n        const cookies = new Cookies();\n        cookies.set('token', token);\n        cookies.set('username', username);\n        if (token !== '') {\n            this.setState({token: token, isAuthenticated: true});\n        } else {\n            this.setState({token: token, isAuthenticated: false});\n        }\n        this.getStorageToken();\n    }\n\n    logout() {\n        this.setToken('');\n    }\n\n    getStorageToken() {\n        const cookies = new Cookies();\n        const token = cookies.get('token');\n        const username = cookies.get('username');\n        if (token !== '') {\n            this.setState({token: token, 'username': username, isAuthenticated: true}, () => {\n                this.loadProjects(`${apiUrl}/projects/`);\n                this.loadUsers(`${apiUrl}/users/`);\n                this.loadToDo(`${apiUrl}/todo/`);\n            });\n        } else {\n            this.setState({token: token, 'username': '', isAuthenticated: false});\n        }\n    }\n\n    getToken(username, password) {\n        fetch(`${apiUrl}/jwt/`,\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                    \"X-Requested-With\": \"XMLHttpRequest\",\n                },\n                body: JSON.stringify({\n                    username: username,\n                    password: password,\n                }),\n            })\n            .then(response => {\n                return response.json();\n            })\n            .then(response => {\n                this.setToken(response.access, username);\n            })\n            .catch(error => console.log(error));\n    }\n\n    getHeaders() {\n        let headers = {\n            \"Content-Type\": \"application/json;charset=utf-8\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n        };\n        if (this.state.isAuthenticated) {\n            headers.Authorization = `Bearer ${this.state.token}`;\n        }\n        return headers;\n    }\n\n    loadUsers(url) {\n        const headers = this.getHeaders();\n        fetch(`${url}`,\n            {\n                method: \"GET\",\n                'headers': headers,\n            })\n            .then((response) => {\n                return response.json();\n            })\n            .then((request) => {\n                if (!request.detail) {\n                    // const users = request;\n                    // const previous = request.previous;\n                    // const next = request.next;\n                    this.setState(\n                        {\n                            // previousUsersUrl: previous,\n                            // nextUsersUrl: next,\n                            usersList: request,\n                        }\n                    );\n                } else {\n                    this.logout()\n                }\n            })\n            .catch(error => console.log(error));\n    }\n\n    loadToDo(url) {\n        const headers = this.getHeaders();\n        fetch(`${url}`,\n            {\n                method: \"GET\",\n                headers: headers,\n            })\n            .then((response) => {\n                return response.json();\n            })\n            .then((request) => {\n                if (request.results) {\n                    const toDos = request.results;\n                    const previous = request.previous;\n                    const next = request.next;\n                    this.setState(\n                        {\n                            previousToDosUrl: previous,\n                            nextToDosUrl: next,\n                            toDoList: toDos,\n                        }\n                    );\n                } else {\n                    this.logout()\n                }\n            })\n            .catch(error => console.log(error));\n    }\n\n    createUpdateToDo(id, creator, project, body) {\n        const headers = this.getHeaders();\n        let method = 'POST';\n        let toDo = '';\n        if (id) {\n            method = 'PUT';\n            toDo = `${id}/`\n        }\n        fetch(`${apiUrl}/todo/${toDo}`,\n            {\n                method: method,\n                headers: headers,\n                body: JSON.stringify({creator: creator, project: project, body: body})\n            })\n            .then(() => this.getStorageToken())\n            .catch(error => console.log(error))\n    }\n\n    deactivateToDo(id) {\n        const headers = this.getHeaders();\n        fetch(`${apiUrl}/todo/${id}/`,\n            {\n                method: 'DELETE',\n                'headers': headers\n            })\n            .then(() => {\n                let toDoList = this.state.toDoList;\n                toDoList = toDoList.map(toDo => {\n                    if (toDo.id === +id) {\n                        toDo.isActive = false;\n                    }\n                    return toDo;\n                })\n                this.setState({'toDoList': toDoList});\n            })\n            .catch(error => console.log(error));\n    }\n\n    loadProjects(url) {\n        const headers = this.getHeaders();\n        fetch(`${url}`,\n            {\n                method: \"GET\",\n                headers: headers,\n            })\n            .then((response) => {\n                return response.json();\n            })\n            .then((request) => {\n                if (!request.detail) {\n                    // const projectsList = request.results;\n                    // const previous = request.previous;\n                    // const next = request.next;\n                    this.setState(\n                        {\n                            // previousProjectsUrl: previous,\n                            // nextProjectsUrl: next,\n                            // projectsList: projectsList, // если пагинация то запрашиваем искомые проекты у апи\n                            projectsList: request,\n                            filteredProjectsList: request,\n                        }\n                    );\n                } else {\n                    this.logout()\n                }\n            })\n            .catch(error => console.log(error));\n    }\n\n    projectFilter(searchLine) {\n        let re = new RegExp(searchLine, 'i')\n        let filteredList = searchLine === '' ?\n            this.state.projectsList :\n            this.state.projectsList.filter(project => project.name.match(re))\n        this.setState({filteredProjectsList: filteredList})\n    }\n\n    createUpdateProject(id, name, gitLink, users) {\n        const headers = this.getHeaders();\n        let method = 'POST';\n        let project = '';\n        if (id) {\n            method = 'PUT';\n            project = `${id}/`\n        }\n        fetch(`${apiUrl}/projects/${project}`,\n            {\n                method: method,\n                headers: headers,\n                body: JSON.stringify({name: name, gitLink: gitLink, users: users})\n            })\n            .then(() => this.getStorageToken())\n            .catch(error => console.log(error))\n    }\n\n    deleteProject(id) {\n        const headers = this.getHeaders();\n        fetch(`${apiUrl}/projects/${id}/`,\n            {\n                method: 'DELETE',\n                'headers': headers,\n            })\n            .then(() => {\n                this.setState({projectsList: this.state.projectsList.filter(project => project.id !== id)});\n            })\n            .catch(error => console.log(error));\n    }\n\n    componentDidMount() {\n        this.getStorageToken();\n    }\n\n    render() {\n        return (\n            <div className={'App'}>\n                <HashRouter>\n                    <Menu username={this.state.username}\n                          isAuthenticated={this.state.isAuthenticated}\n                          logout={this.logout.bind(this)}\n                    />\n                    <Switch>\n                        <Route exact path={'/'}>\n                            <UsersList usersList={this.state.usersList}\n                                       nextPage={this.state.nextUsersUrl}\n                                       previousPage={this.state.previousUsersUrl}\n                                       load={this.loadUsers.bind(this)}\n                            />\n                        </Route>\n                        <Route exact path={'/login'}>\n                            <LoginForm\n                                getToken={this.getToken.bind(this)}\n                            />\n                        </Route>\n                        <Route exact path={'/todos'}>\n                            <ToDosList toDosList={this.state.toDoList}\n                                       nextPage={this.state.nextToDosUrl}\n                                       previousPage={this.state.previousToDosUrl}\n                                       load={this.loadToDo.bind(this)}\n                                       deactivate={this.deactivateToDo.bind(this)}\n                            />\n                        </Route>\n                        <Route exact path={'/projects/:id/edit'}>\n                            <ProjectForm allUsers={this.state.usersList}\n                                         allProjects={this.state.projectsList}\n                                         createUpdateProject={this.createUpdateProject.bind(this)}/>\n                        </Route>\n                        <Route exact path='/todos/create'>\n                            <ToDoForm allProjects={this.state.projectsList}\n                                      allUsers={this.state.usersList}\n                                      username={this.state.username}\n                                      createUpdateToDo={this.createUpdateToDo.bind(this)}/>\n                        </Route>\n                        <Route exact path={'/todos/:id/edit'}>\n                            <ToDoForm allUsers={this.state.usersList}\n                                      allToDos={this.state.toDoList}\n                                      allProjects={this.state.projectsList}\n                                      username={this.state.username}\n                                      createUpdateToDo={this.createUpdateToDo.bind(this)}/>\n                        </Route>\n                        <Route exact path={'/projects'}>\n                            <ProjectsList projectsList={this.state.filteredProjectsList}\n                                          nextPage={this.state.nextProjectsUrl}\n                                          previousPage={this.state.previousProjectsUrl}\n                                          load={this.loadProjects.bind(this)}\n                                          deleteProject={this.deleteProject.bind(this)}\n                                          projectFilter={this.projectFilter.bind(this)}\n                            />\n                        </Route>\n                        <Route exact path='/projects/create'>\n                            <ProjectForm allUsers={this.state.usersList}\n                                         createUpdateProject={this.createUpdateProject.bind(this)}/>\n                        </Route>\n                        <Route exact path={'/projects/:id/edit'}>\n                            <ProjectForm allUsers={this.state.usersList}\n                                         allProjects={this.state.projectsList}\n                                         createUpdateProject={this.createUpdateProject.bind(this)}/>\n                        </Route>\n                        <Route exact path={'/projects/:id'}>\n                            <ProjectDetail projectsList={this.state.projectsList}/>\n                        </Route>\n                        <Redirect from={'/users'} to={'/'}/>\n                        <Route component={page404}/>\n                    </Switch>\n                    <Footer/>\n                </HashRouter>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}